package com.yoyofurniture.bean;

import com.itextpdf.kernel.pdf.PdfDocument;
import com.itextpdf.kernel.pdf.PdfWriter;
import com.itextpdf.layout.Document;
import com.itextpdf.layout.element.Paragraph;
import com.itextpdf.layout.element.Table;
import com.itextpdf.layout.element.Text;
import com.itextpdf.layout.property.TextAlignment;
import com.yoyofurniture.utility.HandleAccount;

import java.io.FileNotFoundException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;

import com.yoyofurniture.utility.HandleSales;
import java.time.Month;
import java.time.format.DateTimeFormatter;

/**
 *
 * @author petywh
 */
public class SaleReport{
    private final List<SaleOrder> saleOrderList = new ArrayList<>();
    private static double salesTotal;
    /**
     * Generate Work Done Report in PDF form
     * @throws FileNotFoundException exception
     */
    public static void generateClosedSaleReport(String user, String month, String yearString) throws FileNotFoundException {
        int monthInt = Month.valueOf(month.toUpperCase()).getValue();
        int yearInt = Integer.parseInt(yearString);
        List<SaleOrder> selectedOrders = new ArrayList<>();
        try {
            List<SaleOrder> salesorders = HandleSales.readAllSalesOrder();

            for (SaleOrder saleorder : salesorders) {
                LocalDate orderDate = LocalDate.parse(saleorder.getSaleDateTime(),DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm:ss"));
                if (orderDate.getMonthValue() == monthInt && orderDate.getYear() == yearInt && saleorder.getStatus().equals("CLOSED")){
                    selectedOrders.add(saleorder);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        
        LocalDate ld = LocalDate.now();
        
        String pdfName = "src/main/resources/com.yoyofurniture.closedsalereport/" + yearString+ "-"+ month+"-" +"CLOSED_SALE.pdf";
        
        PdfWriter writer = new PdfWriter(pdfName);
        PdfDocument pdf = new PdfDocument(writer);
        Document document = new Document(pdf);
        Paragraph yoyo = new Paragraph("YOYO Furniture").setTextAlignment(TextAlignment.CENTER).setBold().setFontSize(16);
        document.add(yoyo);
        // Add content to the document
        String headerText = "Closed Sale Report (" + month +" "+ yearString+  ")";
        Text header = new Text(headerText);
        Paragraph headerParagraph = new Paragraph(header).setTextAlignment(TextAlignment.CENTER).setBold().setUnderline().setFontSize(20);
        document.add(headerParagraph);
        
        Paragraph h2 = new Paragraph("Generated by: "+ user+ " (" +ld+")").setFontSize(8);
       
        document.add(h2);
        
        Paragraph h3 = new Paragraph("Closed Sales Summary:").setFontSize(12).setBold();
        document.add(h3);
        
        
        
        Table table = new Table(5); // 5 columns for the data
        table.addHeaderCell("Sale Order ID").setTextAlignment(TextAlignment.CENTER);
        table.addHeaderCell("Sale DateTime");
        table.addHeaderCell("Salesperson").setTextAlignment(TextAlignment.CENTER);
        table.addHeaderCell("Customer").setTextAlignment(TextAlignment.CENTER);
        table.addHeaderCell("Order Total").setTextAlignment(TextAlignment.CENTER);
       
        
        
        if (selectedOrders.isEmpty()) {
            // Add a message if there are no order entries
            for (int i = 0; i < 5; i++) {
                table.addCell("");
            }
            document.add(table);
            document.add(new Paragraph("\n"));
            Paragraph noEntriesParagraph = new Paragraph("No entries were found")
                                                .setFontSize(12)
                                                .setTextAlignment(TextAlignment.CENTER);
            document.add(noEntriesParagraph);
        } else {
            salesTotal = 0;
            try {
                List<Customer> customers = HandleAccount.readAllData("customer.txt",
                        userinfo -> new Customer(userinfo[0], userinfo[1], userinfo[2], userinfo[3]), "\\|")
                        .stream().map(user1 -> (Customer) user1).toList(); 
                
                List<Salesperson> salespersons = HandleAccount.readAllData("salesperson.txt",
                            userinfo -> new Salesperson(userinfo[0], userinfo[1], userinfo[2], userinfo[3], userinfo[4],userinfo[5],userinfo[6]), "\\,")
                    .stream().map(user2 -> (Salesperson) user2).toList();
                
                for (SaleOrder order : selectedOrders) {
                    table.addCell(order.getSaleID());
                    Paragraph saleDateTimeParagraph = new Paragraph(order.getSaleDateTime())
                                                        .setFontSize(14);
                    table.addCell(saleDateTimeParagraph);
                    
                    Salesperson matchingSalesperson = salespersons.stream()
                                                        .filter(salesperson -> salesperson.getUserID().equals(order.getSalesperson()))
                                                        .findFirst().orElse(null);

                    if (matchingSalesperson != null) {
                        table.addCell(order.getSalesperson()+"("+matchingSalesperson.getName()+")");
                    } 

                    
                    Customer matchingCustomer = customers.stream()
                                                        .filter(customer -> customer.getUserID().equals(order.getCustomer()))
                                                        .findFirst().orElse(null);

                    if (matchingCustomer != null) {
                        table.addCell(order.getCustomer()+"("+matchingCustomer.getName()+")");
                    } 
            
                    table.addCell(String.valueOf(order.getTotal()));
                    salesTotal = calculateSalesTotal(salesTotal, (int) order.getTotal());
            }
            table.addCell("");
            table.addCell("");
            table.addCell("");
            table.addCell("Grand Total");
            table.addCell(Double.toString(salesTotal));
            document.add(table);

         
        } catch (Exception e) {
            e.printStackTrace();
        }
    }        
        document.add(new Paragraph("\n"));
        Paragraph h5 = new Paragraph("Private & Confidential").setFontSize(8).setTextAlignment(TextAlignment.CENTER);
       
        document.add(h5);
        document.close();

    }
    
    public static void generateApprovedSaleReport(String user, String month, String yearString) throws FileNotFoundException {
        int monthInt = Month.valueOf(month.toUpperCase()).getValue();
        int yearInt = Integer.parseInt(yearString);
        List<SaleOrder> selectedOrders = new ArrayList<>();
        try {
            List<SaleOrder> salesorders = HandleSales.readAllSalesOrder();

            for (SaleOrder saleorder : salesorders) {
                LocalDate orderDate = LocalDate.parse(saleorder.getSaleDateTime(),DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm:ss"));
                if (orderDate.getMonthValue() == monthInt &&
                    orderDate.getYear() == yearInt &&
                    (saleorder.getStatus().equals("WORK_DONE") || saleorder.getStatus().equals("APPROVED")|| saleorder.getStatus().equals("PREPARING"))) {
                    selectedOrders.add(saleorder);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        
        LocalDate ld = LocalDate.now();
        
        String pdfName = "src/main/resources/com.yoyofurniture.approvedsalereport/" + yearString+ "-"+ month+"-" +"APPROVED_SALE.pdf";
        
        PdfWriter writer = new PdfWriter(pdfName);
        PdfDocument pdf = new PdfDocument(writer);
        Document document = new Document(pdf);
        Paragraph yoyo = new Paragraph("YOYO Furniture").setTextAlignment(TextAlignment.CENTER).setBold().setFontSize(16);
        document.add(yoyo);
        // Add content to the document
        String headerText = "Approved Sale Report (" + month +" "+ yearString+  ")";
        Text header = new Text(headerText);
        Paragraph headerParagraph = new Paragraph(header).setTextAlignment(TextAlignment.CENTER).setBold().setUnderline().setFontSize(20);
        document.add(headerParagraph);
        
        Paragraph h2 = new Paragraph("Generated by: "+ user+ " (" +ld+")").setFontSize(8);
       
        document.add(h2);
        
        Paragraph h3 = new Paragraph("Approved Sales Summary:").setFontSize(12).setBold();
        document.add(h3);
        
        
        
        Table table = new Table(8); // 7 columns for the data
        table.addHeaderCell("Sale Order ID").setTextAlignment(TextAlignment.CENTER);
        table.addHeaderCell("Sale DateTime");
        table.addHeaderCell("Salesperson").setTextAlignment(TextAlignment.CENTER);
        table.addHeaderCell("Customer").setTextAlignment(TextAlignment.CENTER);
        table.addHeaderCell("Status").setTextAlignment(TextAlignment.CENTER);
        table.addHeaderCell("Product").setTextAlignment(TextAlignment.CENTER);
        table.addHeaderCell("Quantity").setTextAlignment(TextAlignment.CENTER);
        table.addHeaderCell("Subtotal").setTextAlignment(TextAlignment.CENTER);
       
        
        
        if (selectedOrders.isEmpty()) {
            // Add a message if there are no order entries
            for (int i = 0; i < 9; i++) {
                table.addCell("");
            }
            document.add(table);
            document.add(new Paragraph("\n"));
            Paragraph noEntriesParagraph = new Paragraph("No entries were found")
                                                .setFontSize(12)
                                                .setTextAlignment(TextAlignment.CENTER);
            document.add(noEntriesParagraph);
        } else {
            salesTotal = 0;
            try {
                List<Customer> customers = HandleAccount.readAllData("customer.txt",
                        userinfo -> new Customer(userinfo[0], userinfo[1], userinfo[2], userinfo[3]), "\\|")
                        .stream().map(user1 -> (Customer) user1).toList(); 
                
                List<Salesperson> salespersons = HandleAccount.readAllData("salesperson.txt",
                            userinfo -> new Salesperson(userinfo[0], userinfo[1], userinfo[2], userinfo[3], userinfo[4],userinfo[5],userinfo[6]), "\\,")
                    .stream().map(user2 -> (Salesperson) user2).toList();
                
                for (SaleOrder order : selectedOrders) {
                    table.addCell(order.getSaleID());
                    Paragraph saleDateTimeParagraph = SaleReport.setFontSize(order.getSaleDateTime(),10);
                    table.addCell(saleDateTimeParagraph);
                    
                    Salesperson matchingSalesperson = salespersons.stream()
                                                        .filter(salesperson -> salesperson.getUserID().equals(order.getSalesperson()))
                                                        .findFirst().orElse(null);

                    if (matchingSalesperson != null) {
                        Paragraph salespersonText = SaleReport.setFontSize((order.getSalesperson()+"("+matchingSalesperson.getName()+")"),10);            
                        table.addCell(salespersonText);
                    } 

                    
                    Customer matchingCustomer = customers.stream()
                                                        .filter(customer -> customer.getUserID().equals(order.getCustomer()))
                                                        .findFirst().orElse(null);

                    if (matchingCustomer != null) {
                        Paragraph customerText = SaleReport.setFontSize(order.getCustomer()+"("+matchingCustomer.getName(),10);
   
                        table.addCell(customerText);
                    } 
                        
                    Paragraph statusText = SaleReport.setFontSize(order.getStatus(), 10);
                    table.addCell(statusText);
                    
                    int count = 0;
                    for (SelectedProduct selectedProduct : order.getProductList()) {
                        count++;
                        Product product = selectedProduct.getProduct();
                        int quantity = selectedProduct.getQuantity();
                        double amount = selectedProduct.getAmount();
                        if (count == 1){
                            Paragraph itemName = SaleReport.setFontSize(product.getItemName(),10);
                            table.addCell(itemName);
                            Paragraph quantity2 = SaleReport.setFontSize(String.valueOf(quantity), 10);
                            table.addCell(quantity2);
                            Paragraph subtotal = SaleReport.setFontSize(String.valueOf(amount), 10);
                            table.addCell(subtotal);
                            salesTotal = calculateSalesTotal(salesTotal, (int) order.getTotal());
                        } else if(count>1){
                            table.addCell("");
                            table.addCell("");
                            table.addCell("");
                            table.addCell("");
                            table.addCell("");
                            Paragraph itemName = SaleReport.setFontSize(product.getItemName(),10);
                            table.addCell(itemName);
                            Paragraph quantity2 = SaleReport.setFontSize(String.valueOf(quantity), 10);
                            table.addCell(quantity2);
                            Paragraph subtotal = SaleReport.setFontSize(String.valueOf(amount), 10);
                            table.addCell(subtotal);
                        }
                    }
                    
            }
            table.addCell("");
            table.addCell("");
            table.addCell("");
            table.addCell("");
            table.addCell("");
            table.addCell("");
            table.addCell("Total");
            table.addCell(Double.toString(salesTotal));
         
            document.add(table);

         
        } catch (Exception e) {
            e.printStackTrace();
        }
    }        
        document.add(new Paragraph("\n"));
        Paragraph h5 = new Paragraph("Private & Confidential").setFontSize(8).setTextAlignment(TextAlignment.CENTER);
       
        document.add(h5);
        document.close();

    }
    
    
    public static void main(String[] args) {
        try {
            generateApprovedSaleReport("user","February","2024");
            System.out.println("PDF created successfully.");
        } catch (FileNotFoundException e) {
            System.err.println("File not found: " + e.getMessage());
        }
    }
    
    public static double calculateSalesTotal(double currentTotal, double num) {
        return  currentTotal + num;
    }
    
    public static Paragraph setFontSize(String text,int num){
        Paragraph fullText = new Paragraph(text);
        fullText.setFontSize(num);
        return fullText;
    }

}
