package com.yoyofurniture.gui.officer;

import com.yoyofurniture.bean.Customer;
import com.yoyofurniture.gui.officer.*;
import com.yoyofurniture.bean.SaleOrder;
import com.yoyofurniture.bean.Officer;
import com.yoyofurniture.bean.Salesperson;
import com.yoyofurniture.bean.Status;

import com.yoyofurniture.gui.SalesOrderUpdates;
import com.yoyofurniture.utility.HandleAccount;
import com.yoyofurniture.utility.HandleSales;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;



public class OfcSubmitProduction extends javax.swing.JPanel {
    private final Officer officer;
    private final List<SaleOrder> saleOrderList = new ArrayList<>();
    private DefaultTableModel jTableModel;
    private final List<SaleOrder> selectedOrders = new ArrayList<>();

    public OfcSubmitProduction(Officer officer) {
        this.officer = officer;
        initComponents();
        selfInitComponents();
        
        
    
        
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTableSaleOrder = new javax.swing.JTable();
        jTextFieldSearch = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jButtonMenu = new javax.swing.JButton();
        jButtonSubmit = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jSalespersonComboBox1 = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        jCustomerComboBox1 = new javax.swing.JComboBox<>();
        jResetButton = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JLabel();
        jStatusComboBox = new javax.swing.JComboBox<>();

        jTableSaleOrder.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jTableSaleOrder.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTableSaleOrder.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableSaleOrderMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTableSaleOrder);

        jTextFieldSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextFieldSearchKeyReleased(evt);
            }
        });

        jLabel1.setText("Search By ID:");

        jButtonMenu.setText("Menu");
        jButtonMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonMenuActionPerformed(evt);
            }
        });

        jButtonSubmit.setText("Submit Production");
        jButtonSubmit.setEnabled(false);
        jButtonSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSubmitActionPerformed(evt);
            }
        });

        jLabel2.setText("Filter By Salesperson:");

        jSalespersonComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "None" }));
        jSalespersonComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jSalespersonComboBox1ActionPerformed(evt);
            }
        });

        jLabel4.setText("Filter By Customer:");

        jCustomerComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "None" }));
        jCustomerComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCustomerComboBox1ActionPerformed(evt);
            }
        });

        jResetButton.setText("Clear Filters");
        jResetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jResetButtonActionPerformed(evt);
            }
        });

        jComboBox1.setText("Filter By Status:");

        jStatusComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "None" }));
        jStatusComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jStatusComboBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(54, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 747, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonSubmit, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButtonMenu)
                            .addComponent(jTextFieldSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jSalespersonComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jCustomerComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jStatusComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jResetButton))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(53, 53, 53)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(49, 49, 49))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jButtonMenu)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel4)
                    .addComponent(jComboBox1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSalespersonComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCustomerComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jResetButton)
                    .addComponent(jStatusComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 367, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(8, 8, 8)
                .addComponent(jButtonSubmit, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(67, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSubmitActionPerformed
        int selectedRow = jTableSaleOrder.getSelectedRow();

        if (selectedRow != -1) {
            String saleID = jTableSaleOrder.getValueAt(selectedRow, 0).toString();
            try {
                if(officer.submitProduction(saleOrderList, saleID)){
                    refreshScreenWhenDelete();
                    JOptionPane.showMessageDialog(this
                            , "Sale order " + saleID + " successfully submitted for production!", "Success", JOptionPane.INFORMATION_MESSAGE);
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
            
        }
    }//GEN-LAST:event_jButtonSubmitActionPerformed

    private void jButtonMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonMenuActionPerformed
        enterFunction(new OfcMain(officer));
    }//GEN-LAST:event_jButtonMenuActionPerformed

    private void jTextFieldSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldSearchKeyReleased
        handleSearch();
    }//GEN-LAST:event_jTextFieldSearchKeyReleased

    private void jSalespersonComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jSalespersonComboBox1ActionPerformed
        handleSearch();
    }//GEN-LAST:event_jSalespersonComboBox1ActionPerformed

    private void jCustomerComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCustomerComboBox1ActionPerformed
        handleSearch();
    }//GEN-LAST:event_jCustomerComboBox1ActionPerformed

    private void jResetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jResetButtonActionPerformed
        resetTableToDefault();
        

        // Clear all search bars and combo boxes to "None"
        jTextFieldSearch.setText("");
        jCustomerComboBox1.setSelectedItem("None");
        jStatusComboBox.setSelectedItem("None");
        jSalespersonComboBox1.setSelectedItem("None");
    }//GEN-LAST:event_jResetButtonActionPerformed

    private void jTableSaleOrderMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableSaleOrderMouseClicked
        
        jButtonSubmit.setEnabled(true);
    }//GEN-LAST:event_jTableSaleOrderMouseClicked

    private void jStatusComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jStatusComboBoxActionPerformed
        handleSearch();
    }//GEN-LAST:event_jStatusComboBoxActionPerformed
    
    private void handleSearch(){
        List<SaleOrder> saleOrders = new ArrayList<>(selectedOrders);
        jTableModel.setRowCount(0);

        String searchKeywordID = jTextFieldSearch.getText();
        
        final String selectedCustomerID;
        String selectedCustomer = String.valueOf(jCustomerComboBox1.getSelectedItem());
        if (selectedCustomer.equals("None")){
            selectedCustomerID = "";
        } else {
            selectedCustomerID = String.valueOf(selectedCustomer).split("\\(")[0].trim();   
        }
        
        
        final String selectedSalespersonID;
        String selectedSalesperson = String.valueOf(jSalespersonComboBox1.getSelectedItem());
        if (selectedSalesperson.equals("None")){
            selectedSalespersonID = "";
        } else {
            selectedSalespersonID = String.valueOf(selectedSalesperson).split("\\(")[0].trim();   
        }
        
        final String selectedFinalStatus;
        String selectedStatus = String.valueOf(jStatusComboBox.getSelectedItem());
        if (selectedStatus.equals("None")){
            selectedFinalStatus = "";
        } 
        else {
            selectedFinalStatus = selectedStatus;   
        }  

       
        saleOrders.stream().filter(saleOrder -> saleOrder.getSaleID().contains(searchKeywordID) && 
                saleOrder.getCustomer().contains(selectedCustomerID) &&
                saleOrder.getStatus().contains(selectedFinalStatus) &&
                saleOrder.getSalesperson().contains(selectedSalespersonID)).sorted((o1, o2) ->
                        Integer.parseInt(o2.getSaleID().substring(2)) -
                                Integer.parseInt(o1.getSaleID().substring(2)))
                .forEach(saleOrder -> insertData(saleOrder.getSaleID(), saleOrder.getSalesperson(), saleOrder.getCustomer(),saleOrder.getSaleDateTime(),
                        saleOrder.getTotal(), saleOrder.getStatus()));

        jTableModel.fireTableDataChanged();
    }

    /**
     * refresh current panel when deleting salesperson
     */
    private void refreshScreenWhenDelete() {
        JFrame frame = (JFrame) SwingUtilities.getWindowAncestor(jTableSaleOrder);
        if (frame != null) {
            frame.getContentPane().removeAll();
            frame.setContentPane(new OfcSubmitProduction(officer));
            frame.getContentPane().revalidate();
            frame.getContentPane().repaint();
        }
    }

    /**
     * insert row to table
     * @param saleOderID sale order id
     * @param custID customer id
     * @param dateTime date time
     * @param total total
     * @param status status
     */
    private void insertData(String saleOderID, String salespersonID, String custID, String dateTime, double total, String status) {
        // Add a row with the provided data to the DefaultTableModel
        jTableModel.addRow(new Object[]{saleOderID, salespersonID, custID,  dateTime, total, status});
    }

    /**
     * Switch scene (panel)
     * @param jPanel panel to be switched
     */
    private void enterFunction(JPanel jPanel) {
        JFrame frame = (JFrame) SwingUtilities.getWindowAncestor(this);
        if (frame != null) {
            frame.getContentPane().removeAll();
            frame.setContentPane(jPanel);
            frame.getContentPane().revalidate();
            frame.getContentPane().repaint();
        }
    }
    private void selfInitComponents() {
        jTableModel = new DefaultTableModel(new Object[]{"Sale ID", "Salesperson ID","Customer ID", "Date Time", "Total", "Status"}, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };

        jTableSaleOrder.setModel(jTableModel);

        
        try {
            List<Salesperson> salespersons = HandleAccount.readAllData("salesperson.txt",
                            userinfo -> new Salesperson(userinfo[0], userinfo[1], userinfo[2], userinfo[3], userinfo[4],userinfo[5],userinfo[6]), "\\,")
                    .stream().map(user -> (Salesperson) user).toList();

            for (Salesperson saleperson : salespersons) {
                jSalespersonComboBox1.addItem(saleperson.getUserID() + " (" + saleperson.getName()+")");
                        
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        
        try {
            List<Customer> customers = HandleAccount.readAllData("customer.txt",
                            userinfo -> new Customer(userinfo[0], userinfo[1], userinfo[2], userinfo[3]), "\\|")
                    .stream().map(user -> (Customer) user).toList();

            for (Customer customer : customers) {
                jCustomerComboBox1.addItem(customer.getUserID() + " (" + customer.getName()+")");
                        
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        
        String[] allStatuses = Status.getAllStatuses();
        for (String status : allStatuses) {
            if (status.equals("APPROVED") || status.equals("UNAPPROVED")|| status.equals("PENDING")) {
                jStatusComboBox.addItem(status);
            } 
                        
            }
        
        saleOrderList.clear();
        selectedOrders.clear();
        try {
            saleOrderList.addAll(HandleSales.readAllSalesOrder());
            for (SaleOrder saleorder : saleOrderList) {
                if (saleorder.getStatus().equals("PENDING")||saleorder.getStatus().equals("UNAPPROVED")||saleorder.getStatus().equals("APPROVED")){
                    System.out.println(saleorder.getSaleID());
                    System.out.println(saleorder.getProductList());
                    selectedOrders.add(saleorder);
                }
            } 
        } catch (Exception e) {
            e.printStackTrace();
        }
        
        resetTableToDefault();
        
        
        
        
    }
    
    private void resetTableToDefault() {
        // Clear the table
        jTableModel.setRowCount(0);
        
       
        // Populate the table with default values
        List<SaleOrder> saleOrders = new ArrayList<>(selectedOrders);
        saleOrders.stream()
                .sorted((o1, o2) -> Integer.parseInt(o2.getSaleID().substring(2)) -
                        Integer.parseInt(o1.getSaleID().substring(2)))
                .forEach(saleOrder -> insertData(saleOrder.getSaleID(), saleOrder.getSalesperson(), saleOrder.getCustomer(), saleOrder.getSaleDateTime(),
                        saleOrder.getTotal(), saleOrder.getStatus()));

        // Refresh the table
        jTableModel.fireTableDataChanged();
        
        
        jButtonSubmit.setEnabled(false);

        
        
        
}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonMenu;
    private javax.swing.JButton jButtonSubmit;
    private javax.swing.JLabel jComboBox1;
    private javax.swing.JComboBox<String> jCustomerComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JButton jResetButton;
    private javax.swing.JComboBox<String> jSalespersonComboBox1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox<String> jStatusComboBox;
    private javax.swing.JTable jTableSaleOrder;
    private javax.swing.JTextField jTextFieldSearch;
    // End of variables declaration//GEN-END:variables
}
