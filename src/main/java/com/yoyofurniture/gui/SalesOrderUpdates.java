/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.yoyofurniture.gui;

import com.yoyofurniture.bean.*;
import com.yoyofurniture.gui.officer.ChangeQuantity;
import com.yoyofurniture.gui.officer.OfcAddNewItem;
import com.yoyofurniture.utility.HandleAccount;
import com.yoyofurniture.utility.HandleSales;


import javax.swing.*;
import java.util.List;
import javax.swing.table.DefaultTableModel;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.ArrayList;
import java.util.Iterator;
/**
 *
 * @author petywh
 */
public class SalesOrderUpdates extends javax.swing.JFrame  {
    private final SaleOrder saleOrder;
    private Salesperson salesperson;
    private Customer customer;
    private DefaultTableModel jTableModel;
    private static int clickCount = 0;
    private static int cartClickCount = 0;
    private static List<SelectedProduct> productList = new ArrayList<>();;
    private static List<SelectedProduct> newProductList = new ArrayList<>();;
    /**
     * Creates new form SalesOrderUpdates
     */
    public SalesOrderUpdates(SaleOrder saleOrder) {
        this.saleOrder = saleOrder;
        initComponents();
        selfInintComponents();
        
    
    }
    
   
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabelSP = new javax.swing.JLabel();
        jComboBoxSP = new javax.swing.JComboBox<>();
        jLabelOrderID = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jComboBoxCust = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        jLabelDateTime = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jComboBoxStatus = new javax.swing.JComboBox<>();
        jEditButton = new javax.swing.JButton();
        jSaveButton = new javax.swing.JButton();
        jResetButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jAddCart = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableProduct = new javax.swing.JTable();
        jEditCart = new javax.swing.JButton();
        jRemoveCart = new javax.swing.JButton();
        jChangeQuantity = new javax.swing.JButton();
        jResetCart = new javax.swing.JButton();
        jSaveCart = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabelTotal = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(850, 600));
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setText("Order ID:");

        jLabelSP.setText("Salesperson:");

        jLabelOrderID.setText("<blank>");

        jLabel2.setText("Customer:");

        jLabel4.setText("Order Date & Time:");

        jLabelDateTime.setText("<blank>");

        jLabel7.setText("Status:");

        jEditButton.setText("Edit Values");
        jEditButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jEditButtonActionPerformed(evt);
            }
        });

        jSaveButton.setText("Save Changes");
        jSaveButton.setEnabled(false);
        jSaveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jSaveButtonActionPerformed(evt);
            }
        });

        jResetButton.setText("Reset Fields");
        jResetButton.setEnabled(false);
        jResetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jResetButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabelSP)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel7))
                                .addGap(95, 95, 95)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabelOrderID, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(124, 124, 124)
                                        .addComponent(jLabel4)
                                        .addGap(74, 74, 74)
                                        .addComponent(jLabelDateTime))
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(jComboBoxStatus, 0, 137, Short.MAX_VALUE)
                                        .addComponent(jComboBoxCust, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jComboBoxSP, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(jEditButton, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSaveButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jResetButton)))
                .addContainerGap(203, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabelOrderID)
                    .addComponent(jLabel4)
                    .addComponent(jLabelDateTime))
                .addGap(30, 30, 30)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelSP)
                    .addComponent(jComboBoxSP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jComboBoxCust, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jComboBoxStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jEditButton)
                    .addComponent(jSaveButton)
                    .addComponent(jResetButton))
                .addContainerGap())
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, 810, 200));

        jAddCart.setText("Add Item/s to Cart");
        jAddCart.setEnabled(false);
        jAddCart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jAddCartActionPerformed(evt);
            }
        });

        jTableProduct.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Price", "Quantity", "Amount"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableProduct.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(jTableProduct);

        jEditCart.setText("Edit Cart");
        jEditCart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jEditCartActionPerformed(evt);
            }
        });

        jRemoveCart.setText("Remove Item/s");
        jRemoveCart.setEnabled(false);
        jRemoveCart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRemoveCartActionPerformed(evt);
            }
        });

        jChangeQuantity.setText("Change Quantity");
        jChangeQuantity.setEnabled(false);
        jChangeQuantity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jChangeQuantityActionPerformed(evt);
            }
        });

        jResetCart.setText("Reset Cart");
        jResetCart.setEnabled(false);
        jResetCart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jResetCartActionPerformed(evt);
            }
        });

        jSaveCart.setText("Save Changes");
        jSaveCart.setEnabled(false);
        jSaveCart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jSaveCartActionPerformed(evt);
            }
        });

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Total:");

        jLabelTotal.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelTotal.setText("jLabel3");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(18, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 650, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jAddCart, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jRemoveCart, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jChangeQuantity, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jResetCart, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jSaveCart, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelTotal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jEditCart, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(15, 15, 15))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jEditCart)
                        .addGap(18, 18, 18)
                        .addComponent(jAddCart)
                        .addGap(18, 18, 18)
                        .addComponent(jRemoveCart)
                        .addGap(18, 18, 18)
                        .addComponent(jChangeQuantity)
                        .addGap(63, 63, 63)
                        .addComponent(jLabel3)
                        .addGap(1, 1, 1)
                        .addComponent(jLabelTotal)
                        .addGap(18, 18, 18)
                        .addComponent(jSaveCart)
                        .addGap(18, 18, 18)
                        .addComponent(jResetCart)
                        .addGap(6, 6, 6))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(34, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 220, 830, 370));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jResetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jResetButtonActionPerformed
        setDefaultDetails();
    }//GEN-LAST:event_jResetButtonActionPerformed
    
    private void turnOnEdits(){
        jResetButton.setEnabled(true);
        jSaveButton.setEnabled(true);
        jComboBoxCust.setEnabled(true);
        jComboBoxSP.setEnabled(true);
        jComboBoxStatus.setEnabled(true);
    }
    
    private void turnOffEdits(){
        jResetButton.setEnabled(false);
        jSaveButton.setEnabled(false);
        jComboBoxCust.setEnabled(false);
        jComboBoxSP.setEnabled(false);
        jComboBoxStatus.setEnabled(false);
    }
    
    private void turnOnCartEdits(){
        jResetCart.setEnabled(true);
        jSaveCart.setEnabled(true);
        jChangeQuantity.setEnabled(true);
        jAddCart.setEnabled(true);
        jRemoveCart.setEnabled(true);
    }
    
    private void turnOffCartEdits(){
        jResetCart.setEnabled(false);
        jSaveCart.setEnabled(false);
        jChangeQuantity.setEnabled(false);
        jAddCart.setEnabled(false);
        jRemoveCart.setEnabled(false);
    }
    
    
    private void jEditButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jEditButtonActionPerformed
        clickCount++;
        if (clickCount % 2 == 0) {
                jEditButton.setText("Edit Values");
                resetCartTable();
                turnOffEdits();
                jEditCart.setEnabled(true);
                
            } else {
                jEditButton.setText("Go Back");
                jEditCart.setEnabled(false);
                turnOnEdits();
            }
    }//GEN-LAST:event_jEditButtonActionPerformed

    private void jSaveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jSaveButtonActionPerformed
        saleOrder.setSalesperson(String.valueOf(jComboBoxSP.getSelectedItem()).split(":")[0]);
        saleOrder.setCustomer(String.valueOf(jComboBoxCust.getSelectedItem()).split(":")[0]);
        saleOrder.setStatus(String.valueOf(jComboBoxStatus.getSelectedItem()));
        
        jEditButtonActionPerformed(evt);
        System.out.println(saleOrder.formatInfo());
        HandleSales handleSales = HandleSales.getHandleSalesInstance();
        
        handleSales.updateExistingOrder(saleOrder);
        JOptionPane.showMessageDialog(this, "Order Details Updated successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
        selfInintComponents();
    }//GEN-LAST:event_jSaveButtonActionPerformed

    private void jAddCartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jAddCartActionPerformed
        OfcAddNewItem addItem = new OfcAddNewItem(saleOrder);
        addItem.setVisible(true);
        addItem.addWindowListener(new WindowAdapter() {
        public void windowClosed(WindowEvent e) {
            // Retrieve the values from the second JFrame
            int newquantity = addItem.getQuantity();
            Product newproduct = addItem.getSelectedProduct();

            // Use the retrieved values as needed
            if (newproduct != null) {
                SelectedProduct selectedNewProducts = new SelectedProduct(newproduct,newquantity);
                newProductList.add(selectedNewProducts);
                refreshCartTable(newProductList);
                
                // Proceed with any further processing
            } else {
                System.out.println("No product selected.");
            }
            
            
        }
    });
        
    }//GEN-LAST:event_jAddCartActionPerformed

    private void jEditCartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jEditCartActionPerformed
        cartClickCount++;
        if (cartClickCount % 2 == 0) {
                jEditCart.setText("Edit Cart");
                resetCartTable();
                turnOffCartEdits();
                jEditButton.setEnabled(true);
            } else {
                jEditCart.setText("Go Back");
                turnOnCartEdits();
                jEditButton.setEnabled(false);
            }
    }//GEN-LAST:event_jEditCartActionPerformed

    private void jResetCartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jResetCartActionPerformed
        resetCartTable();
    }//GEN-LAST:event_jResetCartActionPerformed

    private void jRemoveCartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRemoveCartActionPerformed
        int selectedRow = jTableProduct.getSelectedRow();
        if (jTableProduct.getRowCount() > 1) {
            String itemID = jTableModel.getValueAt(selectedRow, 0).toString();
            jTableModel.removeRow(selectedRow);

            // Remove the selected product from the newProductList
            for (Iterator<SelectedProduct> iterator = newProductList.iterator(); iterator.hasNext();) {
                SelectedProduct selectedProduct = iterator.next();
                if (selectedProduct.getProduct().getItemID().equals(itemID)) {
                    iterator.remove(); // Remove the matching object from the list
                    break; // Exit the loop since we've found and removed the item
                }
            }

            refreshCartTable(newProductList);
        } else {
            // Show a message or perform any action indicating that at least one row must remain
            JOptionPane.showMessageDialog(this, "At least one item must remain in the cart.");
        }
    }//GEN-LAST:event_jRemoveCartActionPerformed

    private void jChangeQuantityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jChangeQuantityActionPerformed
        int selectedRow = jTableProduct.getSelectedRow();
        if (selectedRow != -1) {
            String itemID = jTableModel.getValueAt(selectedRow, 0).toString();
            
            for (Iterator<SelectedProduct> iterator = newProductList.iterator(); iterator.hasNext();) {
                SelectedProduct selectedProduct = iterator.next();
                
                if (selectedProduct.getProduct().getItemID().equals(itemID)) {
                    int selectedproductquantity = selectedProduct.getQuantity();
                    ChangeQuantity changeQuantity = new ChangeQuantity(selectedproductquantity);
                    changeQuantity.setVisible(true);
                    changeQuantity.addWindowListener(new WindowAdapter() {
                        public void windowClosed(WindowEvent e) {
                            // Retrieve the values from the second JFrame
                            int newquantity = changeQuantity.getQuantity();
                            System.out.println(newquantity);
                            selectedProduct.setQuantity(newquantity);
                            

                            // Call refreshCartTable here, after the window is closed
                            refreshCartTable(newProductList);
                        }
                    });
                    break; // Exit the loop since we've found and removed the item
                }
            }
        }
    }//GEN-LAST:event_jChangeQuantityActionPerformed

    private void jSaveCartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jSaveCartActionPerformed
        saleOrder.setProductList(newProductList); 
        saleOrder.setTotal(updateTotal(newProductList));
        HandleSales handleSales = HandleSales.getHandleSalesInstance();
        handleSales.updateExistingOrder(saleOrder);
        jEditCartActionPerformed(evt);
        JOptionPane.showMessageDialog(this, "Cart Details Updated successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
        
        selfInintComponents();
       
        
        
    }//GEN-LAST:event_jSaveCartActionPerformed
    

    
    /**
     * @param args the command line arguments
     */
    private void insertData(String itemID, String itemName, String itemCategory, int itemPrice,int itemQuantity, double itemAmount) {
        // Add a row with the provided data to the DefaultTableModel
        jTableModel.addRow(new Object[]{itemID, itemName, itemCategory, itemPrice ,itemQuantity, itemAmount});
    }
    
    private void setDefaultDetails(){
        jComboBoxCust.removeAllItems();
        jComboBoxSP.removeAllItems();
        jComboBoxStatus.removeAllItems();
        try {
            List<Customer> allcustomers = HandleAccount.readAllData("customer.txt",
                            userinfo -> new Customer(userinfo[0], userinfo[1], userinfo[2], userinfo[3]), "\\|")
                    .stream().map(user -> (Customer) user).toList();

            for (Customer selectcustomer : allcustomers) {
                jComboBoxCust.addItem(selectcustomer.getUserID() + ":" + selectcustomer.getName());
                if (saleOrder.getCustomer().equals(selectcustomer.getUserID())){
                    jComboBoxCust.setSelectedItem(selectcustomer.getUserID() + ":" + selectcustomer.getName());
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        
        try {
            List<Salesperson> allsalesperson = HandleAccount.readAllData("salesperson.txt",
                            userinfo -> new Salesperson(userinfo[0], userinfo[1], userinfo[2], userinfo[3],userinfo[4],userinfo[5],userinfo[6]), "\\,")
                    .stream().map(user -> (Salesperson) user).toList();

            for (Salesperson selectsalesperson : allsalesperson) {
                jComboBoxSP.addItem(selectsalesperson.getUserID() + ":" + selectsalesperson.getName());
                if (saleOrder.getSalesperson().equals(selectsalesperson.getUserID())){
                    jComboBoxSP.setSelectedItem(selectsalesperson.getUserID() + ":" + selectsalesperson.getName());
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        
       
        String[] allStatuses = Status.getAllStatuses();

        for (String statuses : allStatuses) {
            jComboBoxStatus.addItem(statuses);
            if (saleOrder.getStatus().equals(statuses)){
                jComboBoxStatus.setSelectedItem(statuses);
            }
        }
    }
    private void selfInintComponents() {
        try {
            salesperson = HandleAccount.readAllData("salesperson.txt", userinfo -> new Salesperson(userinfo[0], userinfo[1],
                            userinfo[2], userinfo[3], userinfo[4], userinfo[5], userinfo[6]), ","
                    ).stream().filter(user -> user.getUserID().equals(saleOrder.getSalesperson())).findFirst()
                    .map(user -> (Salesperson)user).get();
            customer = HandleAccount.readAllData("customer.txt", userinfo -> new Customer(userinfo[0], userinfo[1],
                            userinfo[2], userinfo[3]), "\\|"
                    ).stream().filter(user -> user.getUserID().equals(saleOrder.getCustomer())).findFirst()
                    .map(user -> (Customer)user).get();
            
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        
        
        
        
        setDefaultDetails();
        turnOffEdits();
        jLabelOrderID.setText(saleOrder.getSaleID());
        jLabelDateTime.setText(saleOrder.getSaleDateTime());
        jLabelTotal.setText(saleOrder.getTotal()+"");
        
        
        setTitle("Modify SaleOrder Details (ID:"+saleOrder.getSaleID()+")");
        setLocationRelativeTo(null);
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        
        
        jTableModel = new DefaultTableModel(new Object[]{"ID", "Name", "Category", "Item Price","Quantity", "Amount"}, 0) {
        };
        
        jTableProduct.setModel(jTableModel);
        
        if (saleOrder.getStatus().equals("WORK_DONE")||saleOrder.getStatus().equals("CLOSED")){
            jEditCart.setEnabled(false);
        } else{
            jEditCart.setEnabled(true);
        }
        
        resetCartTable();
        
      
        
    }
    
    private void enterFunction(JPanel jPanel){
        JFrame frame = (JFrame) SwingUtilities.getWindowAncestor(this);
        if (frame != null) {
            frame.getContentPane().removeAll();
            frame.setContentPane(jPanel);
            frame.getContentPane().revalidate();
            frame.getContentPane().repaint();
        }
    }
    
    private void refreshCartTable(List<SelectedProduct> newProductList){
        jTableModel.setRowCount(0);
        newProductList.forEach(selectedProduct
                -> insertData(selectedProduct.getProduct().getItemID(), selectedProduct.getProduct().getItemName(),
                selectedProduct.getProduct().getItemCategory(), (int) selectedProduct.getProduct().getItemPrice(), selectedProduct.getQuantity(), selectedProduct.getAmount()));
        jTableModel.fireTableDataChanged();
        
        for (SelectedProduct product:newProductList){
            System.out.println(product.getProduct().getItemID()+","+product.getQuantity());
        }
        updateTotal(newProductList);
    }
    
    private void resetCartTable(){
        jTableModel.setRowCount(0);
        System.out.println(saleOrder.getTotal());
        
        List<SelectedProduct> productList = new ArrayList<>(saleOrder.getProductList());
        newProductList.clear();
        for (SelectedProduct product : productList) {
            // Create a new SelectedProduct object with the same properties as the product
            SelectedProduct newSelectedProduct = new SelectedProduct(
                product.getProduct(),  // Set the product
                product.getQuantity()  // Set the quantity
                   
            ); 
            System.out.println(product.getProduct()+"  "+product.getQuantity());
            
            // Add the new SelectedProduct to the newProductList
            newProductList.add(newSelectedProduct);
        }
        
       
        
        newProductList.forEach(selectedProduct
                -> insertData(selectedProduct.getProduct().getItemID(), selectedProduct.getProduct().getItemName(),
                selectedProduct.getProduct().getItemCategory(), (int) selectedProduct.getProduct().getItemPrice(),selectedProduct.getQuantity(), selectedProduct.getAmount()));
        jTableModel.fireTableDataChanged();
        updateTotal(newProductList);
    }
    
    
    
    private double updateTotal(List<SelectedProduct> newProductList){
        double total = 0.0;
        
        for (SelectedProduct selectedProduct : newProductList) {
            // Calculate the amount for each product (quantity * price) and add it to the total
            total += selectedProduct.getQuantity() * selectedProduct.getProduct().getItemPrice();
        }
        jLabelTotal.setText(String.format("%.2f", total));
        return total;
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jAddCart;
    private javax.swing.JButton jChangeQuantity;
    private javax.swing.JComboBox<String> jComboBoxCust;
    private javax.swing.JComboBox<String> jComboBoxSP;
    private javax.swing.JComboBox<String> jComboBoxStatus;
    private javax.swing.JButton jEditButton;
    private javax.swing.JButton jEditCart;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabelDateTime;
    private javax.swing.JLabel jLabelOrderID;
    private javax.swing.JLabel jLabelSP;
    private javax.swing.JLabel jLabelTotal;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JButton jRemoveCart;
    private javax.swing.JButton jResetButton;
    private javax.swing.JButton jResetCart;
    private javax.swing.JButton jSaveButton;
    private javax.swing.JButton jSaveCart;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableProduct;
    // End of variables declaration//GEN-END:variables
}
