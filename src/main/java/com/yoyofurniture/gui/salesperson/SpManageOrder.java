package com.yoyofurniture.gui.salesperson;

import com.yoyofurniture.bean.SaleOrder;
import com.yoyofurniture.bean.Salesperson;
import com.yoyofurniture.gui.SalesOrderDetailAndInvoice;
import com.yoyofurniture.utility.HandleSales;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.util.ArrayList;
import java.util.List;


public class SpManageOrder extends javax.swing.JPanel {
    private final Salesperson salesperson;
    private final List<SaleOrder> saleOrderList = new ArrayList<>();
    private DefaultTableModel jTableModel;

    public SpManageOrder(Salesperson salesperson) {
        this.salesperson = salesperson;
        initComponents();
        selfInitComponents();
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTableSaleOrder = new javax.swing.JTable();
        jTextFieldSearch = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jButtonMenu = new javax.swing.JButton();
        jButtonDelete = new javax.swing.JButton();
        jButtonDetails = new javax.swing.JButton();

        jTableSaleOrder.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jTableSaleOrder.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(jTableSaleOrder);

        jTextFieldSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextFieldSearchKeyReleased(evt);
            }
        });

        jLabel1.setText("Search By ID:");

        jButtonMenu.setText("Menu");
        jButtonMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonMenuActionPerformed(evt);
            }
        });

        jButtonDelete.setText("Delete");
        jButtonDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteActionPerformed(evt);
            }
        });

        jButtonDetails.setText("Details");
        jButtonDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDetailsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(54, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButtonMenu)
                    .addComponent(jTextFieldSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 335, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 747, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButtonDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(49, 49, 49))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jButtonMenu)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 367, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(38, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteActionPerformed
        int selectedRow = jTableSaleOrder.getSelectedRow();

        if (selectedRow != -1) {
            String saleID = jTableSaleOrder.getValueAt(selectedRow, 0).toString();

            try {
                if(salesperson.deleteSaleOrder(saleOrderList, saleID)){
                    refreshScreenWhenDelete();
                    JOptionPane.showMessageDialog(this
                            , "Sales deleted successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_jButtonDeleteActionPerformed

    private void jButtonDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDetailsActionPerformed
        int selectedRow = jTableSaleOrder.getSelectedRow();

        if (selectedRow != -1) {
            String saleID = jTableSaleOrder.getValueAt(selectedRow, 0).toString();

            SaleOrder saleOrder = saleOrderList.stream().filter(saleOrder1 -> saleOrder1.getSaleID().equals(saleID))
                    .findFirst().get();

            SalesOrderDetailAndInvoice salesOrderDetail = new SalesOrderDetailAndInvoice(saleOrder);
            salesOrderDetail.setVisible(true);
        }
    }//GEN-LAST:event_jButtonDetailsActionPerformed

    private void jButtonMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonMenuActionPerformed
        enterFunction(new SpMain(salesperson));
    }//GEN-LAST:event_jButtonMenuActionPerformed

    private void jTextFieldSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldSearchKeyReleased
        List<SaleOrder> saleOrders = new ArrayList<>(saleOrderList);
        jTableModel.setRowCount(0);

        String searchID = jTextFieldSearch.getText();

        saleOrders.stream().filter(saleOrder -> saleOrder.getSaleID().contains(searchID) && saleOrder.getSalesperson()
                        .equals(salesperson.getUserID())).sorted((o1, o2) ->
                        Integer.parseInt(o2.getSaleID().substring(2)) -
                                Integer.parseInt(o1.getSaleID().substring(2)))
                .forEach(saleOrder -> insertData(saleOrder.getSaleID(), saleOrder.getCustomer(), saleOrder.getSaleDateTime(),
                        saleOrder.getTotal(), saleOrder.getStatus()));

        jTableModel.fireTableDataChanged();
    }//GEN-LAST:event_jTextFieldSearchKeyReleased


    /**
     * refresh current panel when deleting salesperson
     */
    private void refreshScreenWhenDelete() {
        JFrame frame = (JFrame) SwingUtilities.getWindowAncestor(jTableSaleOrder);
        if (frame != null) {
            frame.getContentPane().removeAll();
            frame.setContentPane(new SpManageOrder(salesperson));
            frame.getContentPane().revalidate();
            frame.getContentPane().repaint();
        }
    }

    /**
     * insert row to table
     * @param saleOderID sale order id
     * @param custID customer id
     * @param dateTime date time
     * @param total total
     * @param status status
     */
    private void insertData(String saleOderID, String custID, String dateTime, double total, String status) {
        // Add a row with the provided data to the DefaultTableModel
        jTableModel.addRow(new Object[]{saleOderID, custID, dateTime, total, status});
    }

    /**
     * Switch scene (panel)
     * @param jPanel panel to be switched
     */
    private void enterFunction(JPanel jPanel) {
        JFrame frame = (JFrame) SwingUtilities.getWindowAncestor(this);
        if (frame != null) {
            frame.getContentPane().removeAll();
            frame.setContentPane(jPanel);
            frame.getContentPane().revalidate();
            frame.getContentPane().repaint();
        }
    }
    private void selfInitComponents() {
        jTableModel = new DefaultTableModel(new Object[]{"Sale ID", "Customer ID", "Date Time", "Total", "Status"}, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };

        jTableSaleOrder.setModel(jTableModel);

        try {
            saleOrderList.addAll(HandleSales.readAllSalesOrder());
        } catch (Exception e) {
            e.printStackTrace();
        }

        List<SaleOrder> saleOrders = new ArrayList<>(saleOrderList);
        saleOrders.stream().filter(saleOrder -> saleOrder.getSalesperson().equals(salesperson.getUserID()))
                .sorted((o1, o2) ->
                        Integer.parseInt(o2.getSaleID().substring(2)) -
                                Integer.parseInt(o1.getSaleID().substring(2)))
                .forEach(saleOrder -> insertData(saleOrder.getSaleID(), saleOrder.getCustomer(), saleOrder.getSaleDateTime(),
                        saleOrder.getTotal(), saleOrder.getStatus()));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonDelete;
    private javax.swing.JButton jButtonDetails;
    private javax.swing.JButton jButtonMenu;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableSaleOrder;
    private javax.swing.JTextField jTextFieldSearch;
    // End of variables declaration//GEN-END:variables
}
